### Single Sign On Endpoints ###
# Cookie to be valid for whole domain on all sub-domaons #


# Token Endpoint to generate  session and access token

location = /sso/token {
	internal;	# Internal Location Called from sub request only
	default_type 'text/plain';

	set $token_sql 'SELECT SHA2(UUID(), 256) AS token' ;

	drizzle_query $token_sql;
	drizzle_pass sso;

	rds_json on;
				
	drizzle_connect_timeout    500ms; # default 60s
	drizzle_send_query_timeout 2s;    # default 60s
	drizzle_recv_cols_timeout  1s;    # default 60s
	drizzle_recv_rows_timeout  1s;    # default 60s
}


location = /sso/session {
	internal;	# Internal Location Called from sub request only
	default_type 'text/plain';

	set_quote_sql_str $token $cookie_session_token;
	set_quote_sql_str $app $arg_app;
	set $session_sql 'SELECT 1 AS no, IFNULL(s_uid, 0) AS uid, IFNULL(s_data,"") as data  FROM session, app WHERE  s_uid = ap_uid AND ap_app = $app AND ap_enabled = 1 AND s_token = $token AND UNIX_TIMESTAMP() - 3600 < s_lastaccess LIMIT 1' ;

	drizzle_query $session_sql;
	drizzle_pass sso;

	rds_json on;
				
	drizzle_connect_timeout    500ms; # default 60s
	drizzle_send_query_timeout 2s;    # default 60s
	drizzle_recv_cols_timeout  1s;    # default 60s
	drizzle_recv_rows_timeout  1s;    # default 60s
	
}

location = /sso/session/add {
	internal;	# Internal Location Called from sub request only
	default_type 'text/plain';

	set_quote_sql_str $token $arg_token;
	set_quote_sql_str $uid $arg_uid;

	set $add_sql 'INSERT INTO session(s_token, s_uid, s_dateadded, s_lastaccess) VALUES ($token, $uid, UNIX_TIMESTAMP(), UNIX_TIMESTAMP())' ;

	drizzle_query $add_sql;
	drizzle_pass sso;

	rds_json on;
				
	drizzle_connect_timeout    500ms; # default 60s
	drizzle_send_query_timeout 2s;    # default 60s
	drizzle_recv_cols_timeout  1s;    # default 60s
	drizzle_recv_rows_timeout  1s;    # default 60s

}

location = /sso/session/update {
	internal;	# Internal Location Called from sub request only
	default_type 'text/plain';

	set_quote_sql_str $token $arg_token;
	
	set $add_sql 'UPDATE session SET s_lastaccess = UNIX_TIMESTAMP() WHERE s_token = $token' ;

	drizzle_query $add_sql;
	drizzle_pass sso;

	rds_json on;
				
	drizzle_connect_timeout    500ms; # default 60s
	drizzle_send_query_timeout 2s;    # default 60s
	drizzle_recv_cols_timeout  1s;    # default 60s
	drizzle_recv_rows_timeout  1s;    # default 60s

}


location = /sso/session/delete {
	internal;	# Internal Location Called from sub request only
	default_type 'text/plain';

	set_quote_sql_str $token $arg_token;

	set $delete_sql 'DELETE FROM session WHERE s_token = $token' ;
	echo $delete_sql;
	drizzle_query $delete_sql;
	drizzle_pass sso;

	rds_json on;
				
	drizzle_connect_timeout    500ms; # default 60s
	drizzle_send_query_timeout 2s;    # default 60s
	drizzle_recv_cols_timeout  1s;    # default 60s
	drizzle_recv_rows_timeout  1s;    # default 60s

}

location = /sso/session/stale {
	internal;	# Internal Location Called from sub request only
	default_type 'text/plain';

	set_quote_sql_str $uid $arg_uid;

	set $delete_sql 'DELETE FROM session WHERE s_uid = $uid AND s_lastaccess < (UNIX_TIMESTAMP() - 7200) ';

	drizzle_query $delete_sql;
	drizzle_pass sso;

	rds_json on;
				
	drizzle_connect_timeout    500ms; # default 60s
	drizzle_send_query_timeout 2s;    # default 60s
	drizzle_recv_cols_timeout  1s;    # default 60s
	drizzle_recv_rows_timeout  1s;    # default 60s

}

location = /sso/login {
	internal;	# Internal Location Called from sub request only
	default_type 'text/plain';

	set_quote_sql_str $username $arg_username;
	set_quote_sql_str $hash $arg_hash;

	set $login_sql 'SELECT 1 as no, u_id as uid, CONCAT(u_firstname, " ", u_lastname) as data FROM user WHERE u_username = $username AND u_hash = SHA2($hash, 256) '; 

	drizzle_query $login_sql;
	drizzle_pass sso;

	rds_json on;
				
	drizzle_connect_timeout    500ms; # default 60s
	drizzle_send_query_timeout 2s;    # default 60s
	drizzle_recv_cols_timeout  1s;    # default 60s
	drizzle_recv_rows_timeout  1s;    # default 60s
	
}


### External Locations

location = /login {
	# MIME type determined by default_type:
    default_type 'text/plain';

    access_by_lua_file /opt/nginx/conf/sites-available/sso.maanas.co/login.lua;
	
	echo 'You are logged in. Please navigate to the resource.';	    	    
}

location = /logout {
	# MIME type determined by default_type:
    default_type 'text/plain';

    access_by_lua_file /opt/nginx/conf/sites-available/sso.maanas.co/logout.lua;
	
	# Return Success in the end
	echo 'OK';
    
}

## Form Location

location = /dologin {
    rewrite ^.*$ http://sso.maanas.co/sso/index.html break;
    #proxy_pass  http://sso.maanas.co/sso/index.html;
    #proxy_set_header        Host            'sso.maanas.co';
    #proxy_set_header        X-Real-IP       $remote_addr;
    #proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
}

location = /401 {
    rewrite ^.*$ http://sso.maanas.co/sso/unauthorized.html break;
    #proxy_pass  http://sso.maanas.co/sso/unauthorized.html;
    #proxy_set_header        Host            'sso.maanas.co';
    #proxy_set_header        X-Real-IP       $remote_addr;
    #proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
}


# Sample Endpoint
location = /apps/default {
	# MIME type determined by default_type:
    default_type 'text/plain';

    # Add this to enable SSO on any location
    # Specify the app which validate the access
	set $app 'default';
    access_by_lua_file /opt/nginx/conf/sso/sso.lua;
	
    # Normal Execution Continues
    echo 'OK';
}


# This block will catch static file requests, such as images, css, js
# The ?: prefix is a 'non-capturing' mark, meaning we do not require
# the pattern to be captured into $1 which should help improve performance
location ~* \.(?:ico|css|js|gif|jpe?g|png)$ {
	# Some basic cache-control for static files to be sent to the browser
	expires max;
	add_header Pragma public;
	add_header Cache-Control "public, must-revalidate, proxy-revalidate";
}

# remove the robots line if you want to use wordpress' virtual robots.txt
location = /robots.txt  { access_log off; log_not_found off; }
location = /favicon.ico { access_log off; log_not_found off; }	

# this prevents hidden files (beginning with a period) from being served
location ~ /\.          { access_log off; log_not_found off; deny all; }

